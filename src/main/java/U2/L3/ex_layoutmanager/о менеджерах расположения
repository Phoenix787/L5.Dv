Абсолютное расположение
Никто не настаивает на обязательном использовании в контейнере менеджера расположения, вы
можете удалить его, вызвав метод setLayout(null). В этом случае вся ответственность за правильное
расположение компонентов на экране ложится на ваши плечи: размеры и позиции компонентов
придется задавать прямо в программе, вызывая для каждого компонента метод setBounds() с
подходящим прямоугольником.
Никогда не используйте абсолютное расположение, иначе рискуете навлечь на себя праведный гнев
любого Java-программиста, который увидит ваш код. Все преимущества динамической смены
внешнего вида приложения средствами библиотеки Swing, вся легкость перехода на другие
платформы — все будет повергнуто в прах в случае абсолютного расположения

Вложенные расположения
В предыдущем разделе, совмещая табличное и последовательное расположения, мы познакомились с
примером так называемого вложенного расположения (nested layout), основная идея которого очень
проста — вы создаете несколько контейнеров с различными менеджерами расположения, а затем
добавляете их друг в друга для получения искомого результата.

Таблица 5.1. Наиболее популярные элементы пользовательского интерфейса
Элемент                                         Способы создания
Строка из небольшого количества                 Идеальная возможность для последовательного расположения
компонентов с одинаковыми                       FlowLayout. Расстояние между компонентами и выравнивание указывается
расстояниями между ними                         в конструкторе
(например, надпись и текстовое поле)

Набор флажков, кнопок или                       Хорошо подойдет табличное расположение GridLayout. Не забудьте
переключателей, расположенных в                 поместить его в панель с расположением FlowLayout, иначе оно
один или несколько рядов (часто                 «расползется» по вашему окну
применяется в диалоговыхокнах для
настройки программы)

Компоненты интерфейса                           Здесь поможет полярное расположение BorderLayout (так что оно годится
произвольного размера,                          не только для окон!). Поместите ваш первый компонент на север панели с
располагающиеся сверху вниз (как                этим расположением. На юг поместите такую же панель, а второй
если бы расположение FlowLayout                 компонент поместите на север этой новой панели. Продолжайте в том же
работало по вертикали)                          духе, пока не разместите все компоненты. Можно использовать и
                                                менеджер расположения, созданный собственноручно.


Расстояние между компонентами при блочном расположении
Нехорошо конечно, что при блочном расположении компоненты располагаются вплотную друг к
другу. Получается неряшливо. Хотелось бы иметь возможность указывать расстояние между
компонентами, причем между разными компонентами разное. Здесь нам на помощь вновь придет
класс Box, неизменный помощник менеджера блочного расположения. В нем определены еще
несколько статических методов, позволяющих создавать специальные невидимые компоненты
определенного размера, которые помещаются между видимыми компонентами и разделяют их.
Существует три типа таких компонентов — это распорки (struts), заполнители (glues) и
фиксированные области (rigid areas).

Распорки используют как палочки определенного размера, которые ставят между компонентами и разделяют их.
Распорки бывают вертикальные и горизонтальные. Размер распорки задается в пикселах.

Заполнители окончательно возводят блочное расположение в ранг универсального. Они работают как
своего рода «пружины», помещаемые вертикально или горизонтально, соответственно текущему
расположению, и раздвигают компоненты, занимая все оставшееся в контейнере место. С помощью заполнителей
можно центрировать компоненты, размещать их не сверху а внизу, равномерно распределять между ними все доступное
пространство. заполнитель - glue

